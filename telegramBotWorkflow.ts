import { createWorkflow, createStep } from "../inngest";
import { z } from "zod";
import { generateImageWithHubaiGemini } from "../utils/hubaiGeminiGenerator";
import { reserveGenerationSlot, releaseReservedSlot } from "../utils/userLimits";
import { incrementUserImageCount } from "../../../server/storage";

// Step 1: Process message and generate image using Gemini 2.5 Flash Image Preview  
const step1 = createStep({
  id: "process-message",
  description: "Process user message and generate image using Gemini 2.5 Flash Image Preview",
  inputSchema: z.object({
    message: z.string().describe("The message text from the user"),
    fileIds: z.array(z.string()).optional().describe("Array of Telegram file_id if any"),
    chatId: z.string().describe("Telegram chat ID"),
    userId: z.string().describe("Telegram user ID for rate limiting"),
    userName: z.string().optional().describe("Username of the sender"),
    messageId: z.string().optional().describe("Message ID for reply reference"),
    threadId: z.string().describe("Thread ID for conversation context"),
    chatType: z.string().optional().default("private").describe("Chat type: private, group, supergroup, channel"),
  }),
  outputSchema: z.object({
    response: z.string().describe("The response message"),
    imagePath: z.string().nullable().optional().describe("Path to generated image file"),
    chatId: z.string().describe("Chat ID to send response to"),
    messageId: z.string().optional().describe("Original message ID for reply"),
    success: z.boolean().describe("Whether generation was successful"),
    imageSent: z.boolean().optional().describe("Whether image was already sent directly from step1"),
    userId: z.string().describe("User ID for limit tracking"),
    // Note: Removed showModeButtons - no longer needed without mode selection
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [Step1] Processing message for Gemini 2.5 Flash Image Preview', {
      messageLength: inputData.message.length,
      imageCount: inputData.fileIds?.length || 0,
      chatId: inputData.chatId,
      userId: inputData.userId
    });

    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch –±–ª–æ–∫–µ
    let slotReservation: any;

    try {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      if (inputData.message === "/start") {
        logger?.info('üîß [Step1] Sending greeting message');
        return {
          response: "–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Nano Banano. –°–∫–∞–∂–∏ —á—ë –Ω–∞–¥–æ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é.",
          chatId: inputData.chatId,
          messageId: inputData.messageId,
          success: true,
          imageSent: false,
          userId: inputData.userId,
        };
      }

      // Note: Removed keyword filtering - users can now send any text or photos directly for generation
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –Ω—É–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å
      if (inputData.fileIds && inputData.fileIds.length > 0 && (!inputData.message || inputData.message.trim().length === 0)) {
        logger?.info('üñºÔ∏è [Step1] Photos without text detected', {
          photoCount: inputData.fileIds.length,
          messageLength: inputData.message?.length || 0
        });
        
        const photoCount = inputData.fileIds.length;
        const responseText = photoCount === 1 
          ? "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π —Ñ–æ—Ç–∫–æ–π?" 
          : "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ —Ñ–æ—Ç–∫–∞–º–∏?";
        
        return {
          response: responseText,
          chatId: inputData.chatId,
          messageId: inputData.messageId,
          success: true,
          imageSent: false,
          userId: inputData.userId,
        };
      }

      // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å)
      logger?.info('üéØ [Step1] Reserving generation slot', {
        userId: inputData.userId,
        userName: inputData.userName
      });

      slotReservation = await reserveGenerationSlot(
        inputData.userId,
        inputData.userName || "Unknown",
        inputData.chatType || "private"
      );

      if (!slotReservation.canGenerate) {
        logger?.info('‚ùå [Step1] Failed to reserve slot - limit exceeded', {
          userId: inputData.userId,
          dailyCount: slotReservation.dailyCount,
          limitReached: slotReservation.limitReached,
          chatType: inputData.chatType
        });

        // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        const isGroupChat = inputData.chatType === "group" || inputData.chatType === "supergroup";
        const limitMessage = isGroupChat 
          ? "üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Nano Banano –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (30/30). –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –≤ 00:00 –ú–°–ö."
          : "–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–µ–Ω: 3/3. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞. –•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç? –ü–∏—à–∏ @dmitriy_ferixdi";

        return {
          response: limitMessage,
          chatId: inputData.chatId,
          messageId: inputData.messageId,
          success: false,
          userId: inputData.userId,
        };
      }

      logger?.info('‚úÖ [Step1] Generation slot reserved', {
        userId: inputData.userId,
        dailyCount: slotReservation.dailyCount,
        remaining: slotReservation.remaining,
        isAdmin: slotReservation.isAdmin
      });

      // –í—ã–∑–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Hubai Gemini –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (—á–µ—Ä–µ–∑ Google SDK)
      logger?.info('üîß [Step1] Calling Hubai Gemini generator with Google SDK', {
        prompt: inputData.message.substring(0, 50) + "...",
        hasImages: !!(inputData.fileIds && inputData.fileIds.length > 0)
      });

      let result;
      try {
        logger?.info('üîß [Step1] About to call generateImageWithHubaiGemini', {
          prompt: inputData.message.substring(0, 50) + "...",
          imageCount: inputData.fileIds?.length || 0,
          fileIds: inputData.fileIds ? inputData.fileIds.map(f => f.substring(0, 15) + '...') : []
        });
        
        result = await generateImageWithHubaiGemini({
          prompt: inputData.message,
          model: 'gemini-2.5-flash-image-preview', // Nano Banana –º–æ–¥–µ–ª—å
          sourceImages: inputData.fileIds,
        }, logger); // ‚Üê –ü–ï–†–ï–î–ê–ï–ú –õ–û–ì–ì–ï–†!
        
      } catch (error) {
        logger?.error('‚ùå [Step1] Exception in generateImageWithHubaiGemini', {
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : undefined
        });
        
        result = {
          success: false,
          error: `Exception in generateImageWithHubaiGemini: ${error instanceof Error ? error.message : String(error)}`
        };
      }

      logger?.info('‚úÖ [Step1] Generation completed', { 
        success: result.success,
        hasImage: !!result.imageBase64,
        description: result.description
      });

      // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
      if (!result.success && !slotReservation.isAdmin) {
        logger?.info('‚Ü©Ô∏è [Step1] Releasing reserved slot due to generation failure');
        await releaseReservedSlot(inputData.userId);
      }

      // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°–†–ê–ó–£ (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ base64 –º–µ–∂–¥—É —à–∞–≥–∞–º–∏)
      if (result.success && result.imageBase64) {
        logger?.info('‚úÖ [Step1] Image generated successfully, saving to temporary file');
        
        // –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
          const crypto = require('crypto');
          const fs = require('fs');
          const path = require('path');
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          const imageId = crypto.randomUUID();
          const tempFilePath = path.join('/tmp', `nano_banana_${imageId}.jpg`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª
          const imageBuffer = Buffer.from(result.imageBase64, 'base64');
          fs.writeFileSync(tempFilePath, imageBuffer);
          
          logger?.info('‚úÖ [Step1] Image saved to temporary file', {
            tempFilePath,
            imageSize: imageBuffer.length,
            chatId: inputData.chatId
          });

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–º–µ—Å—Ç–æ base64 –¥–∞–Ω–Ω—ã—Ö
          return {
            response: result.description || "üçå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
            imagePath: tempFilePath, // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–º–µ—Å—Ç–æ base64!
            chatId: inputData.chatId,
            messageId: inputData.messageId,
            success: true,
            imageSent: false, // Step2 –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            userId: inputData.userId,
          };

        } catch (fileError) {
          logger?.error('‚ùå [Step1] Failed to save image to temp file', {
            error: fileError instanceof Error ? fileError.message : String(fileError),
            chatId: inputData.chatId
          });
          
          // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64 –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
          logger?.warn('‚ö†Ô∏è [Step1] Falling back to base64 transfer (may cause output_too_large)');
          return {
            response: result.description || "üçå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
            imagePath: result.imageBase64, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64 –∫–∞–∫ fallback
            chatId: inputData.chatId,
            messageId: inputData.messageId,
            success: true,
            imageSent: false,
            userId: inputData.userId,
          };
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      let responseMessage = "";
      if (!result.success) {
        // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
        const currentRemaining = slotReservation.isAdmin 
          ? 999 
          : Math.min(slotReservation.remaining + 1, 5); // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–æ—Ç –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω
        const limitInfo = slotReservation.isAdmin 
          ? "" 
          : `\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${currentRemaining}/5`;
        responseMessage = (result.error || "‚ùå Nano Banana –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!") + limitInfo;
      } else {
        responseMessage = "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.";
      }

      return {
        response: responseMessage,
        imagePath: null, // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º base64!
        chatId: inputData.chatId,
        messageId: inputData.messageId,
        success: result.success,
        userId: inputData.userId,
      };
      
    } catch (error) {
      logger?.error('‚ùå [Step1] Error in generation processing', {
        error: error instanceof Error ? error.message : String(error),
        userId: inputData.userId
      });
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –ø—Ä–∏ –ª—é–±–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
      if (typeof slotReservation !== 'undefined' && slotReservation?.canGenerate && !slotReservation?.isAdmin) {
        logger?.info('‚Ü©Ô∏è [Step1] Releasing reserved slot due to unexpected error');
        try {
          await releaseReservedSlot(inputData.userId);
        } catch (releaseError) {
          logger?.error('‚ùå [Step1] Failed to release reserved slot', {
            releaseError: releaseError instanceof Error ? releaseError.message : String(releaseError),
            userId: inputData.userId
          });
        }
      }
      
      return {
        response: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dmitriy_ferixdi",
        chatId: inputData.chatId,
        messageId: inputData.messageId,
        success: false,
        imageSent: false,
        userId: inputData.userId,
      };
    }
  }
});

// Step 2: Send the response back to Telegram
const step2 = createStep({
  id: "send-telegram-response",
  description: "Send the response (with optional image) back to the Telegram chat",
  inputSchema: z.object({
    response: z.string().describe("The response message"),
    imagePath: z.string().nullable().optional().describe("Path to generated image file"),
    chatId: z.string().describe("Chat ID to send response to"),
    messageId: z.string().optional().describe("Original message ID for reply"),
    success: z.boolean().describe("Whether generation was successful"),
    imageSent: z.boolean().optional().describe("Whether image was already sent directly from step1"),
    userId: z.string().describe("User ID for limit tracking"),
  }),
  outputSchema: z.object({
    success: z.boolean().describe("Whether the message was sent successfully"),
    sentMessageId: z.string().optional().describe("ID of the sent message"),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [Step2] Sending response to Telegram', {
      chatId: inputData.chatId,
      responseLength: inputData.response.length,
      hasImage: !!inputData.imagePath,
      imageSent: !!inputData.imageSent
    });

    try {
      if (!process.env.TELEGRAM_BOT_TOKEN) {
        throw new Error("TELEGRAM_BOT_TOKEN not found in environment variables");
      }

      const telegramApiUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ª–∏–±–æ –∫–∞–∫ base64 –ª–∏–±–æ –∫–∞–∫ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ
      if (inputData.imagePath) {
        logger?.info('üîß [Step2] Sending image response');
        
        let imageBuffer: Buffer;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ imagePath –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –∏–ª–∏ base64 –¥–∞–Ω–Ω—ã–º–∏
        if (inputData.imagePath.startsWith('/tmp/')) {
          // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
          const fs = require('fs');
          logger?.info('üìÅ [Step2] Reading image from temporary file', {
            filePath: inputData.imagePath
          });
          
          imageBuffer = fs.readFileSync(inputData.imagePath);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
          try {
            fs.unlinkSync(inputData.imagePath);
            logger?.info('üóëÔ∏è [Step2] Temporary file deleted', {
              filePath: inputData.imagePath
            });
          } catch (deleteError) {
            logger?.warn('‚ö†Ô∏è [Step2] Failed to delete temporary file', {
              filePath: inputData.imagePath,
              error: deleteError instanceof Error ? deleteError.message : String(deleteError)
            });
          }
        } else {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ buffer (fallback)
          logger?.info('üìù [Step2] Converting base64 to buffer');
          imageBuffer = Buffer.from(inputData.imagePath, 'base64');
        }
        
        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formData = new FormData();
        formData.append('chat_id', inputData.chatId);
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º caption –∏ parse_mode - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Buffer –≤ Uint8Array –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Blob
        const uint8Array = new Uint8Array(imageBuffer);
        const blob = new Blob([uint8Array], { type: 'image/jpeg' });
        formData.append('photo', blob, 'generated_image.jpg');
        
        if (inputData.messageId) {
          formData.append('reply_parameters', JSON.stringify({
            message_id: parseInt(inputData.messageId)
          }));
        }

        const response = await fetch(`${telegramApiUrl}/sendPhoto`, {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(`Telegram API error: ${result.description || 'Unknown error'}`);
        }

        logger?.info('‚úÖ [Step2] Image sent to Telegram', {
          success: true,
          messageId: result.result?.message_id,
          chatId: inputData.chatId
        });

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!
        try {
          logger?.info('üìà [Step2] Incrementing user image count after successful delivery', { userId: inputData.userId });
          await incrementUserImageCount(inputData.userId);
          logger?.info('‚úÖ [Step2] User image count incremented successfully');
        } catch (countError) {
          logger?.error('‚ùå [Step2] Failed to increment user count', {
            userId: inputData.userId,
            error: countError instanceof Error ? countError.message : String(countError)
          });
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        }

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try {
          const adminChatId = "6913446846"; // dmitriy_ferixdi
          if (inputData.chatId !== adminChatId) {
            logger?.info('üì§ [Step2] Forwarding generation to admin chat');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            await fetch(`${telegramApiUrl}/forwardMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: adminChatId,
                from_chat_id: inputData.chatId,
                message_id: result.result?.message_id
              })
            });
            
            logger?.info('‚úÖ [Step2] Generation forwarded to admin chat');
          }
        } catch (forwardError) {
          logger?.warn('‚ö†Ô∏è [Step2] Failed to forward to admin chat', {
            error: forwardError instanceof Error ? forwardError.message : String(forwardError)
          });
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }

        return {
          success: true,
          sentMessageId: result.result?.message_id?.toString(),
        };
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      else {
        logger?.info('üîß [Step2] Sending text response');
        
        const payload: any = {
          chat_id: inputData.chatId,
          text: inputData.response,
          parse_mode: 'HTML',
        };

        if (inputData.messageId) {
          payload.reply_parameters = {
            message_id: parseInt(inputData.messageId)
          };
        }

        const response = await fetch(`${telegramApiUrl}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(`Telegram API error: ${result.description || 'Unknown error'}`);
        }

        logger?.info('‚úÖ [Step2] Text message sent to Telegram', {
          success: true,
          messageId: result.result?.message_id,
          chatId: inputData.chatId
        });

        return {
          success: true,
          sentMessageId: result.result?.message_id?.toString(),
        };
      }

    } catch (error) {
      logger?.error('‚ùå [Step2] Error sending message', { 
        error: error instanceof Error ? error.message : String(error),
        chatId: inputData.chatId
      });
      
      return {
        success: false,
        sentMessageId: undefined,
      };
    }
  }
});

// Create the workflow with exactly 2 steps
export const telegramBotWorkflow = createWorkflow({
  id: "telegram-multimodal-bot",
  description: "Simple Telegram bot using Gemini 2.5 Flash Image Preview for image generation",
  inputSchema: z.object({
    message: z.string().describe("The message text from the user"),
    fileIds: z.array(z.string()).optional().describe("Array of Telegram file_id if any"),
    chatId: z.string().describe("Telegram chat ID"),
    userId: z.string().describe("Telegram user ID for rate limiting"),
    userName: z.string().optional().describe("Username of the sender"),
    messageId: z.string().optional().describe("Message ID for reply reference"),
    threadId: z.string().describe("Thread ID for conversation context"),
    chatType: z.string().optional().default("private").describe("Chat type: private, group, supergroup, channel"),
  }),
  outputSchema: z.object({
    success: z.boolean().describe("Whether the message was sent successfully"),
    sentMessageId: z.string().optional().describe("ID of the sent message"),
  }),
})
  .then(step1 as any)
  .then(step2 as any)
  .commit();