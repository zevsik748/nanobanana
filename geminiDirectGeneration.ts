import { 
  upsertUser, 
  hasReachedDailyLimit, 
  saveImageGeneration,
  isAdminUser 
} from "../../../server/storage";

interface GenerationRequest {
  prompt: string;
  userId: string;
  chatId: string;
  username?: string;
  sourceImages?: string[];
}

interface GenerationResult {
  success: boolean;
  imageBase64?: string;
  message: string;
  dailyCount?: number;
  limitReached: boolean;
}

export async function generateImageDirect(request: GenerationRequest): Promise<GenerationResult> {
  const { prompt, userId, chatId, username, sourceImages } = request;
  
  console.log('üîß [DirectGeneration] Starting Gemini 2.5 Flash Image Preview generation', { 
    prompt: prompt.substring(0, 50) + "...", 
    userId,
    sourceImagesCount: sourceImages?.length || 0,
    generationType: sourceImages?.length ? 'image-to-image' : 'text-to-image'
  });

  try {
    if (!process.env.HUBAI_API_KEY) {
      console.error('‚ùå [DirectGeneration] No HUBAI_API_KEY found in environment');
      return {
        success: false,
        message: "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
        limitReached: false
      };
    }
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await upsertUser(userId, username || `user_${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    const isAdmin = isAdminUser(userId);
    const limitReached = await hasReachedDailyLimit(userId);
    
    if (limitReached && !isAdmin) {
      return {
        success: false,
        message: "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
        dailyCount: 15,
        limitReached: true
      };
    }
    
    if (isAdmin) {
      console.log('üëë [DirectGeneration] Admin user detected - unlimited access', { userId });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    const content: any[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è image-to-image)
    if (sourceImages && sourceImages.length > 0) {
      console.log('üìù [DirectGeneration] Processing source images for image-to-image generation');
      
      const limitedImages = sourceImages.slice(0, 4); // –ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      
      for (const imageUrl of limitedImages) {
        try {
          console.log('üìù [DirectGeneration] Downloading source image', { url: imageUrl });
          
          const response = await fetch(imageUrl);
          if (!response.ok) {
            console.warn('‚ö†Ô∏è [DirectGeneration] Failed to download source image', { 
              url: imageUrl, 
              status: response.status 
            });
            continue;
          }
          
          const imageBuffer = await response.arrayBuffer();
          const base64Image = Buffer.from(imageBuffer).toString('base64');
          
          let mimeType = response.headers.get('content-type') || 'image/jpeg';
          if (!mimeType.startsWith('image/')) {
            mimeType = 'image/jpeg';
          }
          
          content.push({
            type: "image_url",
            image_url: {
              url: `data:${mimeType};base64,${base64Image}`
            }
          });
          
          console.log('‚úÖ [DirectGeneration] Successfully processed source image', { 
            url: imageUrl,
            mimeType,
            size: imageBuffer.byteLength 
          });
          
        } catch (error) {
          console.error('‚ùå [DirectGeneration] Error processing source image', { 
            url: imageUrl, 
            error: error instanceof Error ? error.message : String(error)
          });
        }
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Nano Banana (Gemini 2.5 Flash Image) –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const isImageToImage = sourceImages && sourceImages.length > 0;
    
    let nanoBananaPrompt: string;
    if (isImageToImage) {
      nanoBananaPrompt = `Create a new image inspired by the uploaded image(s). ${prompt}. 
Style: High quality, detailed, creative interpretation.
Output: Return the generated image.`;
    } else {
      nanoBananaPrompt = `Generate an image: ${prompt}. 
Style: High quality, detailed, photorealistic.
Output: Return the generated image.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Nano Banana
    content.push({
      type: "text", 
      text: nanoBananaPrompt
    });

    console.log('üìù [DirectGeneration] Making API request to hubai.loe.gg with images endpoint');

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const apiResponse = await fetch('https://hubai.loe.gg/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.HUBAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'imagen-3.0-generate-001', // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å Imagen
        prompt: nanoBananaPrompt,
        n: 1,
        size: '1024x1024',
        response_format: 'b64_json'
      }),
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error('‚ùå [DirectGeneration] API error', { 
        status: apiResponse.status, 
        error: errorText 
      });
      return {
        success: false,
        message: "‚ùå –û—à–∏–±–∫–∞ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        limitReached: false
      };
    }

    const apiResult = await apiResponse.json();
    const responseText = apiResult.choices?.[0]?.message?.content || '';

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Nano Banana (Gemini 2.5 Flash Image)
    let imageBase64 = "";
    let imageDescription = "";
    
    console.log('üîß [DirectGeneration] Processing Nano Banana response', { 
      responseLength: responseText.length,
      responseSample: responseText.substring(0, 300),
      fullApiResult: JSON.stringify(apiResult, null, 2)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç Nano Banana
    if (apiResult.choices?.[0]?.message?.content) {
      const content = apiResult.choices[0].message.content;
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ content (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö)
      if (typeof content === 'object' && content.image) {
        imageBase64 = content.image;
      }
      // 2. –ò—â–µ–º base64 –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
      else if (typeof content === 'string') {
        const base64Patterns = [
          /data:image\/[^;]+;base64,([A-Za-z0-9+/=]+)/g,
          /base64[:\s]*([A-Za-z0-9+/=]{100,})/gi,
          /image[:\s]*([A-Za-z0-9+/=]{100,})/gi,
          /([A-Za-z0-9+/=]{500,})/g  // –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ base64 (–º–∏–Ω–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)
        ];
        
        for (const pattern of base64Patterns) {
          const match = content.match(pattern);
          if (match && match[1]) {
            imageBase64 = match[1];
            break;
          } else if (match && match[0] && match[0].length > 500) {
            imageBase64 = match[0].includes(',') ? match[0].split(',')[1] : match[0];
            break;
          }
        }
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞ –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!imageBase64) {
      if (apiResult.image) {
        imageBase64 = apiResult.image;
      } else if (apiResult.data?.image) {
        imageBase64 = apiResult.data.image;
      } else if (apiResult.choices?.[0]?.image) {
        imageBase64 = apiResult.choices[0].image;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (imageBase64 && imageBase64.length > 100) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const isValidBase64 = /^[A-Za-z0-9+/=]+$/.test(imageBase64.replace(/\s/g, ''));
      
      if (isValidBase64) {
        imageDescription = isImageToImage ? 
          `Nano Banana —Å–æ–∑–¥–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ: ${prompt}` : 
          `Nano Banana —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: ${prompt}`;
          
        console.log('‚úÖ [DirectGeneration] Valid base64 image found', { 
          imageDataLength: imageBase64.length,
          description: imageDescription
        });
      } else {
        imageBase64 = "";
      }
    }

    if (!imageBase64) {
      console.error('‚ùå [DirectGeneration] No valid image data from Nano Banana', { 
        responseLength: responseText.length,
        responseSample: responseText.substring(0, 400),
        apiResultKeys: Object.keys(apiResult),
        choicesLength: apiResult.choices?.length || 0
      });
      
      return {
        success: false,
        message: isImageToImage ? 
          "‚ùå Nano Banana –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ." :
          "‚ùå Nano Banana –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!",
        limitReached: false
      };
    }

    console.log('‚úÖ [DirectGeneration] Image generated successfully', { 
      imageDataLength: imageBase64.length,
      description: imageDescription
    });

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
    const imageUrl = `hubai://gemini-2.5-flash-image-preview/${Date.now()}-${userId}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await saveImageGeneration(userId, prompt, imageUrl);

    // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ workflow step2 –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    const successMessage = isImageToImage ? 
      `‚úÖ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ! ${imageDescription}` :
      `‚úÖ –ì–æ—Ç–æ–≤–æ! ${imageDescription || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.'}`;

    return {
      success: true,
      imageBase64: imageBase64,
      message: successMessage,
      dailyCount: 0, // –°—á–µ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ workflow step2
      limitReached: false
    };

  } catch (error) {
    console.error('‚ùå [DirectGeneration] Error during image generation', {
      error: error instanceof Error ? error.message : String(error),
      userId,
      prompt: prompt.substring(0, 50) + "..."
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      const errorMessage = error.message.toLowerCase();
      
      if (errorMessage.includes('rate limit') || errorMessage.includes('quota')) {
        return {
          success: false,
          message: "‚è±Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
          limitReached: false
        };
      }
      
      if (errorMessage.includes('content policy') || errorMessage.includes('safety')) {
        return {
          success: false,
          message: "üõ°Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
          limitReached: false
        };
      }
      
      if (errorMessage.includes('invalid') || errorMessage.includes('unauthorized')) {
        return {
          success: false,
          message: "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          limitReached: false
        };
      }
    }

    return {
      success: false,
      message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dmitriy_ferixdi",
      limitReached: false
    };
  }
}