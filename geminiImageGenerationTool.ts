import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";
import { 
  upsertUser, 
  hasReachedDailyLimit, 
  saveImageGeneration,
  isAdminUser 
} from "../../../server/storage";

export const geminiImageGenerationTool = createTool({
  id: "gemini-image-generation-tool",
  description: "Generate images using Google Gemini 2.5 Flash Image Preview via hubai.loe.gg. Supports both text-to-image and image-to-image generation. Premium quality, use source_images for image-to-image generation.",
  inputSchema: z.object({
    prompt: z.string().describe("Description of the image to generate (in any language)"),
    user_id: z.string().describe("Telegram user ID for tracking"),
    chat_id: z.string().describe("Telegram chat ID for context"),
    username: z.string().optional().describe("Telegram username for display"),
    source_images: z.array(z.string()).optional().describe("URLs of source images for image-to-image generation (max 4 images)"),
  }),
  outputSchema: z.object({
    success: z.boolean().describe("Whether image generation was successful"),
    image_base64: z.string().optional().describe("Base64 encoded image data (without data URI prefix)"),
    message: z.string().describe("Status message for the user"),
    daily_count: z.number().describe("Always 0 - no limits"),
    limit_reached: z.boolean().describe("Always false - no limits"),
  }),
  execute: async ({ context: { prompt, user_id, chat_id, username, source_images }, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [GeminiImageGenerationTool] Starting image generation with Gemini 2.5 Flash Image Preview', { 
      prompt: prompt.substring(0, 50) + "...", 
      user_id,
      chat_id,
      username,
      source_images_count: source_images?.length || 0,
      generation_type: source_images?.length ? 'image-to-image' : 'text-to-image'
    });

    try {
      const { createOpenAI } = await import("@ai-sdk/openai");
      const { generateObject } = await import("ai");
      
      if (!process.env.HUBAI_API_KEY) {
        logger?.error('‚ùå [GeminiImageGenerationTool] No HUBAI_API_KEY found in environment');
        return {
          success: false,
          message: "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
          daily_count: 0,
          limit_reached: false
        };
      }
      
      logger?.info('üìù [GeminiImageGenerationTool] Using hubai.loe.gg API');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ hubai.loe.gg client –¥–ª—è Gemini
      const openai = createOpenAI({
        baseURL: "https://hubai.loe.gg/v1",
        apiKey: process.env.HUBAI_API_KEY,
      });
      
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      logger?.info('üìù [GeminiImageGenerationTool] Upserting user in database');
      await upsertUser(user_id, username || `user_${user_id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (15 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
      // –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
      logger?.info('üìù [GeminiImageGenerationTool] Checking daily limits');
      const isAdmin = isAdminUser(user_id);
      const limitReached = await hasReachedDailyLimit(user_id);
      
      if (limitReached && !isAdmin) {
        logger?.warn('‚ö†Ô∏è [GeminiImageGenerationTool] User reached daily limit', { user_id });
        return {
          success: false,
          message: "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
          daily_count: 15,
          limit_reached: true
        };
      }
      
      if (isAdmin) {
        logger?.info('üëë [GeminiImageGenerationTool] Admin user detected - unlimited access', { user_id });
      }

      logger?.info('üìù [GeminiImageGenerationTool] Generating image with Gemini 2.5 Flash Image Preview', { 
        prompt: prompt.substring(0, 100) + "...",
        source_images_count: source_images?.length || 0
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è multimodal –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const content: any[] = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (source_images && source_images.length > 0) {
        logger?.info('üìù [GeminiImageGenerationTool] Processing source images for image-to-image generation');
        
        const limitedImages = source_images.slice(0, 4); // –ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        for (const imageUrl of limitedImages) {
          try {
            logger?.info('üìù [GeminiImageGenerationTool] Downloading source image', { url: imageUrl });
            
            const response = await fetch(imageUrl);
            if (!response.ok) {
              logger?.warn('‚ö†Ô∏è [GeminiImageGenerationTool] Failed to download source image', { 
                url: imageUrl, 
                status: response.status 
              });
              continue;
            }
            
            const imageBuffer = await response.arrayBuffer();
            const base64Image = Buffer.from(imageBuffer).toString('base64');
            
            let mimeType = response.headers.get('content-type') || 'image/jpeg';
            if (!mimeType.startsWith('image/')) {
              mimeType = 'image/jpeg';
            }
            
            content.push({
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Image}`
              }
            });
            
            logger?.info('‚úÖ [GeminiImageGenerationTool] Successfully processed source image', { 
              url: imageUrl,
              mimeType,
              size: imageBuffer.byteLength 
            });
            
          } catch (error) {
            logger?.error('‚ùå [GeminiImageGenerationTool] Error processing source image', { 
              url: imageUrl, 
              error: error instanceof Error ? error.message : String(error)
            });
          }
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      const isImageToImage = source_images && source_images.length > 0;
      const generationInstruction = isImageToImage 
        ? `Based on the provided source image(s), generate a new high-quality image following this description: ${prompt}. 
           Use the source image(s) as inspiration for style, composition, or content, but create a new unique image according to the prompt.
           The result should be visually appealing and maintain good composition and lighting.`
        : `Generate a high-quality image based on this description: ${prompt}. 
           Please create a detailed, visually appealing image that matches the description accurately.
           The image should be suitable for sharing and have excellent composition and lighting.`;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      content.push({
        type: "text",
        text: `${generationInstruction} Return the result as a base64-encoded image.`
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è multimodal approach
      const { generateText } = await import("ai");
      const result = await generateText({
        model: openai("gemini-2.5-flash-image-preview"),
        messages: [
          {
            role: "user",
            content: content
          }
        ],
        maxTokens: 4096,
        temperature: 0.8,
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let imageBase64 = "";
      let imageDescription = "";
      
      // –ò—â–µ–º base64 –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
      const base64Patterns = [
        /data:image\/[^;]+;base64,([A-Za-z0-9+/=]+)/g,
        /base64:([A-Za-z0-9+/=]+)/g,
        /([A-Za-z0-9+/=]{100,})/g  // –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ base64
      ];
      
      for (const pattern of base64Patterns) {
        const match = result.text.match(pattern);
        if (match) {
          imageBase64 = match[0].includes(',') ? match[0].split(',')[1] : match[1] || match[0];
          imageDescription = isImageToImage ? 
            `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: ${prompt}` : 
            `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${prompt}`;
          break;
        }
      }

      if (!imageBase64 || imageBase64.length < 100) {
        logger?.error('‚ùå [GeminiImageGenerationTool] No valid image data in response', { 
          responseLength: result.text.length,
          responseSample: result.text.substring(0, 200)
        });
        return {
          success: false,
          message: isImageToImage ? 
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ." :
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
          daily_count: 0,
          limit_reached: false
        };
      }

      logger?.info('‚úÖ [GeminiImageGenerationTool] Image generated successfully', { 
        imageDataLength: imageBase64.length,
        description: imageDescription
      });

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrl = `hubai://gemini-2.5-flash-image-preview/${Date.now()}-${user_id}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      logger?.info('üìù [GeminiImageGenerationTool] Saving generation record to database');
      await saveImageGeneration(user_id, prompt, imageUrl);

      // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ workflow step2 –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

      logger?.info('‚úÖ [GeminiImageGenerationTool] Image generation completed successfully', {
        user_id,
        prompt: prompt.substring(0, 50) + "...",
        imageSize: imageBase64.length
      });

      const successMessage = isImageToImage ? 
        `‚úÖ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ! ${imageDescription}` :
        `‚úÖ –ì–æ—Ç–æ–≤–æ! ${imageDescription || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.'}`;

      return {
        success: true,
        image_base64: imageBase64,
        message: successMessage,
        daily_count: 0, // –°—á–µ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ workflow step2
        limit_reached: false
      };

    } catch (error) {
      logger?.error('‚ùå [GeminiImageGenerationTool] Error during image generation', {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        user_id,
        prompt: prompt.substring(0, 50) + "..."
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        const errorMessage = error.message.toLowerCase();
        
        if (errorMessage.includes('rate limit') || errorMessage.includes('quota')) {
          return {
            success: false,
            message: "‚è±Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            daily_count: 0,
            limit_reached: false
          };
        }
        
        if (errorMessage.includes('content policy') || errorMessage.includes('safety')) {
          return {
            success: false,
            message: "üõ°Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
            daily_count: 0,
            limit_reached: false
          };
        }
        
        if (errorMessage.includes('invalid') || errorMessage.includes('unauthorized')) {
          return {
            success: false,
            message: "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            daily_count: 0,
            limit_reached: false
          };
        }
      }

      return {
        success: false,
        message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dmitriy_ferixdi",
        daily_count: 0,
        limit_reached: false
      };
    }
  },
});