import { Pool } from 'pg';

interface UserLimitResult {
  canGenerate: boolean;
  dailyCount: number;
  remaining: number;
  isAdmin: boolean;
  limitReached: boolean;
  message?: string;
}

const DAILY_LIMIT_PRIVATE = 3; // 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
const DAILY_LIMIT_GROUP = 30; // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
const ADMIN_USER_ID = "6913446846"; // dmitriy_ferixdi - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø

// –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let dbPool: Pool | null = null;

function getDbPool(): Pool {
  if (!dbPool) {
    dbPool = new Pool({
      connectionString: process.env.DATABASE_URL,
      max: 10, // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
  }
  return dbPool;
}

/**
 * –ê—Ç–æ–º–∞—Ä–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Å–ª–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (check + increment –≤ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç race conditions –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å
 */
export async function reserveGenerationSlot(
  userId: string,
  username: string,
  chatType: string = "private" // "private", "group", "supergroup", "channel"
): Promise<UserLimitResult> {
  const pool = getDbPool();
  const client = await pool.connect();
  
  try {
    console.log('üéØ [UserLimits] Reserving generation slot for user', { userId, username });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    const isAdmin = userId === ADMIN_USER_ID;
    if (isAdmin) {
      console.log('üëë [UserLimits] Admin user detected - unlimited access', { userId });
      return {
        canGenerate: true,
        dailyCount: 0,
        remaining: 999,
        isAdmin: true,
        limitReached: false,
        message: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
      };
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    const dailyLimit = (chatType === "private") ? DAILY_LIMIT_PRIVATE : DAILY_LIMIT_GROUP;
    console.log('üìä [UserLimits] Using daily limit', { userId, chatType, dailyLimit });

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–±—Ä–æ—Å–æ–º —Å—á–µ—Ç—á–∏–∫–∞
    await client.query(`
      INSERT INTO users (user_id, username, daily_image_count, last_reset_date)
      VALUES ($1, $2, 0, CURRENT_DATE)
      ON CONFLICT (user_id) DO UPDATE SET
        username = EXCLUDED.username,
        daily_image_count = CASE 
          WHEN users.last_reset_date < CURRENT_DATE THEN 0
          ELSE users.daily_image_count
        END,
        last_reset_date = CASE 
          WHEN users.last_reset_date < CURRENT_DATE THEN CURRENT_DATE
          ELSE users.last_reset_date
        END;
    `, [userId, username]);

    // –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç (—É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫)
    const result = await client.query(`
      UPDATE users 
      SET daily_image_count = daily_image_count + 1
      WHERE user_id = $1 
        AND daily_image_count < $2
      RETURNING daily_image_count as final_count;
    `, [userId, dailyLimit]);

    const queryResult = result.rows[0];
    const slotReserved = queryResult ? true : false; // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–∏–ª —Å—Ç—Ä–æ–∫—É, –∑–Ω–∞—á–∏—Ç —Å–ª–æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω
    const finalCount = queryResult ? queryResult.final_count : dailyLimit; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å, –∑–Ω–∞—á–∏—Ç –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
    
    if (!slotReserved) {
      console.log('‚ùå [UserLimits] Failed to reserve slot - limit reached', { 
        userId, 
        finalCount, 
        limit: dailyLimit 
      });
      
      return {
        canGenerate: false,
        dailyCount: finalCount,
        remaining: 0,
        isAdmin: false,
        limitReached: true,
        message: chatType === "private" ?
          `üéØ *–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω!* –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${dailyLimit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\nüí≥ *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:*\n‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –°–ë–ü: *89935801642* (–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫, –î–º–∏—Ç—Ä–∏–π)\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∫–∏ @dmitriy_ferixdi\n\nüéÅ *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ!*\n\n‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!` :
          `üí∞ *–õ–∏–º–∏—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω!* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${dailyLimit} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\nüîÑ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ú–°–ö.\n\nüí¨ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${DAILY_LIMIT_PRIVATE} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–¥–µ–Ω—å`
      };
    }

    const remaining = Math.max(0, dailyLimit - finalCount);

    console.log('‚úÖ [UserLimits] Slot reserved successfully', { 
      userId, 
      finalCount, 
      remaining,
      limit: dailyLimit 
    });
    
    return {
      canGenerate: true,
      dailyCount: finalCount,
      remaining,
      isAdmin: false,
      limitReached: false,
      message: remaining > 0 
        ? `–°–ª–æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å ${remaining} –∏–∑ ${dailyLimit} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`
        : `–°–ª–æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω! –≠—Ç–æ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`
    };

  } catch (error) {
    console.error('‚ùå [UserLimits] Database error:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î –ó–ê–ü–†–ï–©–ê–ï–ú –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return {
      canGenerate: false,
      dailyCount: 0,
      remaining: 0,
      isAdmin: false,
      limitReached: true,
      message: "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    };
  } finally {
    client.release();
  }
}

/**
 * –£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç)
 */
export async function releaseReservedSlot(userId: string): Promise<void> {
  const pool = getDbPool();
  const client = await pool.connect();
  
  try {
    console.log('‚Ü©Ô∏è [UserLimits] Releasing reserved slot due to generation failure', { userId });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    const isAdmin = userId === ADMIN_USER_ID;
    if (isAdmin) {
      return; // –ê–¥–º–∏–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ—Ç—ã
    }

    // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ 1
    const result = await client.query(`
      UPDATE users 
      SET daily_image_count = GREATEST(daily_image_count - 1, 0)
      WHERE user_id = $1 
        AND last_reset_date = CURRENT_DATE 
        AND daily_image_count > 0
      RETURNING daily_image_count;
    `, [userId]);

    if (result.rows.length > 0) {
      console.log('‚úÖ [UserLimits] Reserved slot released', { 
        userId, 
        newCount: result.rows[0].daily_image_count 
      });
    } else {
      console.log('‚ö†Ô∏è [UserLimits] Could not release slot - user not found or count already 0', { userId });
    }

  } catch (error) {
    console.error('‚ùå [UserLimits] Error releasing reserved slot:', error);
  } finally {
    client.release();
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
 */
export async function getUserStats(userId: string, chatType: string = "private"): Promise<UserLimitResult | null> {
  const pool = getDbPool();
  const client = await pool.connect();
  
  try {
    const isAdmin = userId === ADMIN_USER_ID;
    if (isAdmin) {
      return {
        canGenerate: true,
        dailyCount: 0,
        remaining: 999,
        isAdmin: true,
        limitReached: false,
        message: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
      };
    }

    const result = await client.query(`
      SELECT user_id, username, 
        CASE 
          WHEN last_reset_date < CURRENT_DATE THEN 0
          ELSE daily_image_count
        END as current_count
      FROM users 
      WHERE user_id = $1;
    `, [userId]);
    
    if (result.rows.length === 0) {
      return null;
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    const dailyLimit = (chatType === "private") ? DAILY_LIMIT_PRIVATE : DAILY_LIMIT_GROUP;
    
    const currentCount = result.rows[0].current_count;
    const remaining = Math.max(0, dailyLimit - currentCount);
    const limitReached = currentCount >= dailyLimit;
    
    return {
      canGenerate: !limitReached,
      dailyCount: currentCount,
      remaining,
      isAdmin: false,
      limitReached,
      message: limitReached 
        ? `–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${currentCount}/${dailyLimit} –∑–∞–ø—Ä–æ—Å–æ–≤.`
        : `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${currentCount}/${dailyLimit} –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}`
    };

  } catch (error) {
    console.error('‚ùå [UserLimits] Error getting user stats:', error);
    return null;
  } finally {
    client.release();
  }
}