/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Ñ–∞–π–ª–∞–º–∏
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç file_id –≤ URL –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
 */

import { IMastraLogger } from "@mastra/core/logger";

export interface TelegramFileInfo {
  fileId: string;
  url: string;
  isFileId: boolean;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ file_id –∏–ª–∏ —É–∂–µ URL
 */
export function isFileId(input: string): boolean {
  return !input.startsWith('http') && !input.includes('/');
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–û: –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API –±–µ–∑ —É—Ç–µ—á–∫–∏ —Ç–æ–∫–µ–Ω–∞
 */
export async function resolveFileId(fileId: string, logger?: IMastraLogger): Promise<string | null> {
  try {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      logger?.error('üîê [TelegramFileResolver] TELEGRAM_BOT_TOKEN not found');
      return null;
    }

    logger?.info('üìÅ [TelegramFileResolver] Resolving file_id for local download', { fileId });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`);
    const fileData = await fileResponse.json();
    
    if (!fileData.ok || !fileData.result.file_path) {
      logger?.error('‚ùå [TelegramFileResolver] Failed to get file info', { 
        fileId,
        error: fileData.description || 'Unknown error'
      });
      return null;
    }

    // –ë–ï–ó–û–ü–ê–°–ù–û: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileData.result.file_path}`;
    const downloadResponse = await fetch(fileUrl);
    
    if (!downloadResponse.ok) {
      logger?.error('‚ùå [TelegramFileResolver] Failed to download file', { fileId });
      return null;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
    const arrayBuffer = await downloadResponse.arrayBuffer();
    const base64 = Buffer.from(arrayBuffer).toString('base64');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞, —Ç–∞–∫ –∫–∞–∫ Telegram –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type
    let mimeType = downloadResponse.headers.get('content-type') || '';
    
    if (!mimeType || mimeType === 'application/octet-stream') {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞
      const buffer = Buffer.from(arrayBuffer);
      const signature = buffer.toString('hex', 0, 4).toUpperCase();
      
      logger?.debug('üîç [TelegramFileResolver] Detecting MIME type by file signature', {
        signature: signature,
        contentType: mimeType
      });
      
      if (signature.startsWith('FFD8FF')) {
        mimeType = 'image/jpeg';
      } else if (signature.startsWith('89504E47')) {
        mimeType = 'image/png';
      } else if (signature.startsWith('47494638')) {
        mimeType = 'image/gif';
      } else if (signature.startsWith('52494646')) {
        // RIFF format - could be WebP
        const webpSignature = buffer.toString('ascii', 8, 12);
        if (webpSignature === 'WEBP') {
          mimeType = 'image/webp';
        } else {
          mimeType = 'image/jpeg'; // fallback
        }
      } else {
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        mimeType = 'image/jpeg';
      }
      
      logger?.info('‚úÖ [TelegramFileResolver] MIME type detected by signature', {
        detectedMimeType: mimeType,
        originalContentType: downloadResponse.headers.get('content-type')
      });
    }
    
    logger?.info('‚úÖ [TelegramFileResolver] File downloaded and converted to base64', { 
      fileId,
      size: base64.length,
      mimeType
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º data URL –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –≤–Ω–µ—à–Ω–∏–µ API
    return `data:${mimeType};base64,${base64}`;
  } catch (error) {
    logger?.error('‚ùå [TelegramFileResolver] Error resolving file_id', { 
      fileId,
      error: error instanceof Error ? error.message : String(error)
    });
    return null;
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ file_id –∏–ª–∏ URL –≤ –º–∞—Å—Å–∏–≤ URL
 */
export async function resolveImageUrls(inputs: string[], logger?: IMastraLogger): Promise<string[]> {
  const resolvedUrls: string[] = [];
  
  for (const input of inputs) {
    if (isFileId(input)) {
      const url = await resolveFileId(input, logger);
      if (url) {
        resolvedUrls.push(url);
      }
    } else {
      // –£–∂–µ URL - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      resolvedUrls.push(input);
    }
  }
  
  return resolvedUrls;
}