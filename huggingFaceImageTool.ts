import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";
import { 
  upsertUser, 
  hasReachedDailyLimit, 
  saveImageGeneration 
} from "../../../server/storage";

export const huggingFaceImageTool = createTool({
  id: "hugging-face-image-tool",
  description: "Generate images using free Hugging Face API models like Stable Diffusion. No credit card required, UNLIMITED and completely free service!",
  inputSchema: z.object({
    prompt: z.string().describe("Description of the image to generate (in any language)"),
    user_id: z.string().describe("Telegram user ID for tracking limits and history"),
    chat_id: z.string().describe("Telegram chat ID for context"),
    username: z.string().optional().describe("Username of the user requesting the image"),
    model: z.string().default("stabilityai/stable-diffusion-2-1").describe("HuggingFace model to use"),
  }),
  outputSchema: z.object({
    success: z.boolean().describe("Whether the image generation was successful"),
    image_base64: z.string().optional().describe("Base64 encoded image data for Telegram"),
    message: z.string().describe("Status message for the user"),
    daily_count: z.number().describe("User's current daily image count"),
    limit_reached: z.boolean().describe("Whether user has reached daily limit"),
  }),
  execute: async ({ context: { prompt, user_id, chat_id, username, model }, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [HuggingFaceImageTool] Starting free image generation', { 
      prompt: prompt.substring(0, 50) + "...", 
      user_id,
      chat_id,
      username,
      model
    });

    try {
      logger?.info('üìù [HuggingFaceImageTool] Upserting user in database');
      await upsertUser(user_id, username || `user_${user_id}`);

      logger?.info('üìù [HuggingFaceImageTool] Starting unlimited generation (no limits!)');
      // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —É–±—Ä–∞–Ω—ã!

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API —á–µ—Ä–µ–∑ Pollinations
      const pollinationsUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=512&height=512&model=flux&nologo=true`;
      
      logger?.info('üìù [HuggingFaceImageTool] Generating image with Pollinations free service', { 
        prompt: prompt.substring(0, 100) + "..."
      });

      const response = await fetch(pollinationsUrl, {
        method: 'GET',
      });

      if (!response.ok) {
        const errorText = await response.text();
        logger?.error('‚ùå [HuggingFaceImageTool] HuggingFace API error', {
          status: response.status,
          error: errorText,
          user_id,
          model
        });

        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if (response.status === 429) {
          return {
            success: false,
            message: "‚è±Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            daily_count: 0,
            limit_reached: false
          };
        }

        return {
          success: false,
          message: "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          daily_count: 0,
          limit_reached: false
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ blob
      const imageBlob = await response.arrayBuffer();
      
      if (!imageBlob || imageBlob.byteLength === 0) {
        logger?.error('‚ùå [HuggingFaceImageTool] Empty response from HuggingFace');
        return {
          success: false,
          message: "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          daily_count: 0,
          limit_reached: false
        };
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const imageBase64 = Buffer.from(imageBlob).toString('base64');

      logger?.info('‚úÖ [HuggingFaceImageTool] Image generated successfully', { 
        imageDataLength: imageBase64.length,
        model
      });

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrl = `pollinations://generated/${Date.now()}-${user_id}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      logger?.info('üìù [HuggingFaceImageTool] Saving generation record to database');
      await saveImageGeneration(user_id, prompt, imageUrl);

      // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ workflow step2 –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

      logger?.info('‚úÖ [HuggingFaceImageTool] Free image generation completed successfully', {
        user_id,
        prompt: prompt.substring(0, 50) + "...",
        imageSize: imageBase64.length,
        model
      });

      return {
        success: true,
        image_base64: imageBase64,
        message: `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ AI!`,
        daily_count: 0, // –°—á–µ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ workflow step2
        limit_reached: false
      };

    } catch (error) {
      logger?.error('‚ùå [HuggingFaceImageTool] Error during free image generation', {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        user_id,
        prompt: prompt.substring(0, 50) + "...",
        model
      });

      return {
        success: false,
        message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dmitriy_ferixdi",
        daily_count: 0,
        limit_reached: false
      };
    }
  },
});